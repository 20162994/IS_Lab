%Classification using perceptron

%Reading apple images
A1=imread('apple_04.jpg');
A2=imread('apple_05.jpg');
A3=imread('apple_06.jpg');
A4=imread('apple_07.jpg');
A5=imread('apple_11.jpg');
A6=imread('apple_12.jpg');
A7=imread('apple_13.jpg');
A8=imread('apple_17.jpg');
A9=imread('apple_19.jpg');

%Reading pears images
P1=imread('pear_01.jpg');
P2=imread('pear_02.jpg');
P3=imread('pear_03.jpg');
P4=imread('pear_09.jpg');

hsv_value_A1=spalva_color(A1); 
metric_A1=apvalumas_roundness(A1); 
hsv_value_A2=spalva_color(A2); %color
metric_A2=apvalumas_roundness(A2); %roundness
hsv_value_A3=spalva_color(A3); %color
metric_A3=apvalumas_roundness(A3); %roundness
hsv_value_A4=spalva_color(A4); %color
metric_A4=apvalumas_roundness(A4); %roundness
hsv_value_A5=spalva_color(A5); %color
metric_A5=apvalumas_roundness(A5); %roundness
hsv_value_A6=spalva_color(A6); %color
metric_A6=apvalumas_roundness(A6); %roundness
hsv_value_A7=spalva_color(A7); %color
metric_A7=apvalumas_roundness(A7); %roundness
hsv_value_A8=spalva_color(A8); %color
metric_A8=apvalumas_roundness(A8); %roundness
hsv_value_A9=spalva_color(A9); %color
metric_A9=apvalumas_roundness(A9); %roundness

hsv_value_P1=spalva_color(P1); %color
metric_P1=apvalumas_roundness(P1); %roundness
hsv_value_P2=spalva_color(P2); %color
metric_P2=apvalumas_roundness(P2); %roundness
hsv_value_P3=spalva_color(P3); %color
metric_P3=apvalumas_roundness(P3); %roundness
hsv_value_P4=spalva_color(P4); %color
metric_P4=apvalumas_roundness(P4); %roundness

x1=[hsv_value_A1 hsv_value_A2 hsv_value_A3 hsv_value_P1 hsv_value_P2 hsv_value_A4 hsv_value_A5 hsv_value_P3 hsv_value_A6 hsv_value_A7 hsv_value_A8 hsv_value_P4 hsv_value_A9];
x2=[metric_A1 metric_A2 metric_A3 metric_P1 metric_P2 metric_A4 metric_A5 metric_P3 metric_A6 metric_A7 metric_A8 metric_P4 metric_A8];
% estimated features are stored in matrix P:
P=[x1;x2];

%Desired output vector
T=[1;1;1;-1;-1]; 

%Rezultatui patikrinti
all_T=[1;1;1;-1;-1;1;1;-1;1;1;1;-1;1]; 


w1 = randn(1);
w2 = randn(1);
b = randn(1);

if x1(1)*w1 + x2(1)*w2 + b > 0
yy(1) = 1;
else
yy(1) = -1;
end

e1 = T(1) - yy(1);

if x1(2)*w1 + x2(2)*w2 + b > 0
yy(2) = 1;
else
yy(2) = -1;
end

e2 = T(2) - yy(2);

if x1(3)*w1 + x2(3)*w2 + b > 0
yy(3) = 1;
else
yy(3) = -1;
end

e3 = T(3) - yy(3);

if x1(4)*w1 + x2(4)*w2 + b > 0
yy(4) = 1;
else
yy(4) = -1;
end

e4 = T(4) - yy(4);

if x1(5)*w1 + x2(5)*w2 + b > 0
yy(5) = 1;
else
yy(5) = -1;
end

e5 = T(5) - yy(5);

e = abs(e1) + abs(e2) + abs(e3) + abs(e4) + abs(e5);
eta = 0.3;

ee = [e1 e2 e3 e4 e5];


while e~=0% executes while the total error is not 0
for i = 1:5  
       
        if x1(i)*w1 + x2(i)*w2 + b > 0
            yy(i) = 1;
        else
        if x1(i)*w1 + x2(i)*w2 + b <= 0
            yy(i) = -1;
        end
        end
        
        ee(i) = T(i) - yy(i);
        if T(i) ~= yy(i)
            w1 = w1 + eta*ee(i)*x1(i);
            w2 = w2 + eta*ee(i)*x2(i);
            b = b + eta*ee(i);
        end

    end
    if ee(1) == 0 && ee(2) == 0 && ee(3) == 0 && ee(4) == 0 && ee(5) == 0
        e = 0;
    end
end

for i = 1:13          
        if x1(i)*w1 + x2(i)*w2 + b > 0
            rezultatas(i) = 1;
        else
        if x1(i)*w1 + x2(i)*w2 + b <= 0
            rezultatas(i) = -1;
        end
        end
        rezultatas(i);
end
    rezultatas
    all_T'
